package com.temnenkov.mzctl.telegram;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.temnenkov.mzctl.context.GameContext;
import com.temnenkov.mzctl.game.model.PlayerSession;
import com.temnenkov.mzctl.gameengine.GameEngine;
import com.temnenkov.mzctl.generation.MazeGeneratorFactory;
import org.jetbrains.annotations.NotNull;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;

public class TelegramBotAdapter {
    private static final Logger logger = LoggerFactory.getLogger(TelegramBotAdapter.class);
    private static final String GO_AHEAD_CMD = "‚¨ÜÔ∏è";
    private static final String LEFT_CMD = "‚¨ÖÔ∏è";
    private static final String WHERE_AM_I_CMD = "‚ùì";
    private static final String RIGHT_CMD = "‚û°Ô∏è";
    private static final String BACK_CMD = "üîÑ";
    private static final String GO_AHEAD = "‚¨ÜÔ∏è –í–ø–µ—Ä—ë–¥";
    private static final String LEFT = "‚¨ÖÔ∏è –í–ª–µ–≤–æ";
    private static final String WHERE_AM_I = "‚ùì –ì–¥–µ —è?";
    private static final String RIGHT = "‚û°Ô∏è –í–ø—Ä–∞–≤–æ";
    private static final String BACK = "üîÑ –ù–∞–∑–∞–¥";

    private final TelegramHttpClient client;
    private final ObjectMapper mapper = new ObjectMapper();
    private final GameEngine gameEngine;
    private final TelegramBotConfig config;
    private final GameContext gameContext;

    public TelegramBotAdapter(@NotNull TelegramHttpClient client,
            @NotNull GameEngine gameEngine,
            @NotNull TelegramBotConfig config,
            @NotNull GameContext gameContext) {
        this.client = client;
        this.gameEngine = gameEngine;
        this.config = config;
        this.gameContext = gameContext;
    }

    public void run() throws Exception {
        long offset = 0;
        final int longPollingTimeout = config.getLongPollingTimeout();

        while (true) {
            final String response = client.getUpdates(offset, longPollingTimeout);
            final JsonNode updates = mapper.readTree(response).get("result");

            if (updates.isArray()) {
                for (JsonNode update : updates) {
                    offset = update.get("update_id").asLong() + 1;
                    processUpdate(update);
                }
            }
        }
    }

    private void processUpdate(@NotNull JsonNode update) throws Exception {
        final JsonNode message = update.get("message");
        if (message != null && message.has("text")) {
            final long chatId = message.get("chat").get("id").asLong();
            final String text = message.get("text").asText();
            final String userId = String.valueOf(chatId);

            ensureSessionExists(userId);

            final String responseText = handleCommand(userId, text);
            sendMessageWithKeyboard(chatId, responseText);
        }
    }

    private String handleCommand(@NotNull String userId, @NotNull String command) {
        final String[] args = command.split("\\s+");
        logger.debug("handleCommand command = '{}'", args[0]);
        return switch (args[0]) {
            case "/start" -> "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.";
            case "/help" -> """
            –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
            ‚¨ÜÔ∏è –í–ø–µ—Ä—ë–¥ ‚Äì –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä—ë–¥
            ‚¨ÖÔ∏è –í–ª–µ–≤–æ ‚Äì –ø–æ–≤–æ—Ä–æ—Ç –Ω–∞–ª–µ–≤–æ
            ‚û°Ô∏è –í–ø—Ä–∞–≤–æ ‚Äì –ø–æ–≤–æ—Ä–æ—Ç –Ω–∞–ø—Ä–∞–≤–æ
            üîÑ –ù–∞–∑–∞–¥ ‚Äì –ø–æ–≤–æ—Ä–æ—Ç –Ω–∞–∑–∞–¥
            ‚ùì –ì–¥–µ —è? ‚Äì –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            /generate <–∏–º—è> <—à–∏—Ä–∏–Ω–∞> <–≤—ã—Å–æ—Ç–∞> ‚Äì —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ª–∞–±–∏—Ä–∏–Ω—Ç
            /load <–∏–º—è> ‚Äì –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–∞–±–∏—Ä–∏–Ω—Ç
            """;
            case GO_AHEAD_CMD -> { gameEngine.moveForward(userId); yield gameEngine.describeEnvironment(userId); }
            case LEFT_CMD -> { gameEngine.turnLeft(userId); yield gameEngine.describeEnvironment(userId); }
            case RIGHT_CMD -> { gameEngine.turnRight(userId); yield gameEngine.describeEnvironment(userId); }
            case BACK_CMD -> { gameEngine.turnBack(userId); yield gameEngine.describeEnvironment(userId); }
            case WHERE_AM_I_CMD -> gameEngine.describeEnvironment(userId);
            case "/generate" -> {
                if (args.length == 4) {
                    gameEngine.generateMaze(args[1], Integer.parseInt(args[2]), Integer.parseInt(args[3]), MazeGeneratorFactory.Algo.RANDOMIZED_PRIM);
                    yield "–õ–∞–±–∏—Ä–∏–Ω—Ç '" + args[1] + "' —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω";
                } else {
                    yield "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /generate <–∏–º—è> <—à–∏—Ä–∏–Ω–∞> <–≤—ã—Å–æ—Ç–∞>";
                }
            }
            case "/load" -> {
                if (args.length == 2) {
                    gameEngine.loadMaze(args[1], userId);
                    yield "–õ–∞–±–∏—Ä–∏–Ω—Ç '" + args[1] + "' –∑–∞–≥—Ä—É–∂–µ–Ω.\n" + gameEngine.describeEnvironment(userId);
                } else {
                    yield "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /load <–∏–º—è>";
                }
            }
            default -> "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: '" + command + "'. –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.";
        };
    }

    private void sendMessage(long chatId, String text) throws IOException, InterruptedException {
        final String json = mapper.writeValueAsString(new Message(chatId, text));
        client.sendRequest("sendMessage", json);
    }

    private record Message(
            @JsonProperty("chat_id") long chatId,
            @JsonProperty("text") String text
    ) {}

    private void ensureSessionExists(String userId) {
        PlayerSession session = gameContext.getPlayerSession(userId);
        if (session == null) {
            String defaultMazeName = "default";
            try {
                gameEngine.loadMaze(defaultMazeName, userId);
            } catch (Exception e) {
                logger.warn("–õ–∞–±–∏—Ä–∏–Ω—Ç '{}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ª–∞–±–∏—Ä–∏–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.", defaultMazeName);
                gameEngine.generateMaze(defaultMazeName, 3, 3, MazeGeneratorFactory.Algo.RANDOMIZED_PRIM);
                gameEngine.loadMaze(defaultMazeName, userId);
            }
        }
    }

    private void sendMessageWithKeyboard(long chatId, String text) throws IOException, InterruptedException {
        final String json = mapper.writeValueAsString(new MessageWithKeyboard(chatId, text, new ReplyKeyboardMarkup()));
        client.sendRequest("sendMessage", json);
    }

    private record MessageWithKeyboard(
            @JsonProperty("chat_id") long chatId,
            @JsonProperty("text") String text,
            @JsonProperty("reply_markup") ReplyKeyboardMarkup replyMarkup
    ) {}

    private static class ReplyKeyboardMarkup {
        @JsonProperty("keyboard")
        private final String[][] keyboard = {
                {GO_AHEAD},
                {LEFT, WHERE_AM_I, RIGHT},
                {BACK}
        };

        @JsonProperty("resize_keyboard")
        private final boolean resizeKeyboard = true;

        @JsonProperty("one_time_keyboard")
        private final boolean oneTimeKeyboard = false;
    }

}